[
  {
    "path": "posts/2022-01-17-labelling-line-graphs/",
    "title": "Tidying up Line Graphs",
    "description": "Using ggborderline and secondary axis labels.",
    "author": [
      {
        "name": "Nick Zani",
        "url": {}
      }
    ],
    "date": "2022-01-17",
    "categories": [],
    "contents": "\r\nIntroduction\r\nLast week I had a play around with the geomtextpath package, and this week I wanted to expand on that with ggborderline, again using some Tidy Tuesday data from October 2021 on the number of nurse numbers in different American states.\r\nData\r\nNo data manipulation to be done here, just import and filter the data for some selected states. I chose states which had similar numbers so that some of the lines in the plots would cross over later.\r\n\r\n\r\nlibrary(tibble)\r\nlibrary(dplyr)\r\nlibrary(stringr)\r\nlibrary(readr)\r\nlibrary(tidyr)\r\nlibrary(janitor)\r\nlibrary(ggplot2)\r\n\r\nnurses <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-05/nurses.csv')\r\n\r\n\r\nnurses_filtered <- nurses %>%\r\n  clean_names() %>%\r\n  filter(state %in% c(\"Alabama\", \"Arizona\", \"Oregon\", \"Iowa\"))\r\n\r\n\r\n\r\nInitial Visualisation\r\nThe off-the-shelf ggplot looks fine, but there are definitely some improvements we can make.\r\n\r\n\r\nnurses_filtered %>%\r\n  ggplot(aes(x = year, y = total_employed_rn, group = state, colour = state)) +\r\n  geom_line(size = 2) +\r\n  scale_colour_brewer(type = \"qual\", palette = 2) +\r\n  theme_classic() +\r\n  scale_y_continuous(labels = scales::comma_format()) +\r\n  labs(title = \"Nurse Numbers in Selected States\", \r\n       subtitle = \"Standard ggplot\\n\",\r\n       colour = \"State\",\r\n       x = \"\",\r\n       y = \"Count of Nurses\\n\",\r\n       caption = \"\\nNick Zani | @nickzani\") +\r\n  theme(strip.text = element_text(size = 18),\r\n        axis.title = element_text(size = 14),\r\n        axis.text.x = element_text(size = 14),\r\n        axis.text.y = element_text(size = 18),\r\n        plot.title = element_text(size = 18),\r\n        plot.subtitle = element_text(size = 14),\r\n        plot.caption = element_text(size = 12),\r\n        legend.text = element_text(size = 16),\r\n        legend.title = element_text(size = 18)\r\n  )\r\n\r\n\r\n\r\n\r\nUsing ggborderline\r\nThe ggborderline is a great package for tidying up line graphs where the lines overlap. It adds in a white border to the lines which can be tweaked in thickness\r\n\r\n\r\nlibrary(ggborderline)\r\n\r\nnurses_filtered %>%\r\n  ggplot(aes(x = year, y = total_employed_rn, group = state, colour = state)) +\r\n  geom_borderline(size = 2, bordersize = 0.75) +\r\n  scale_colour_brewer(type = \"qual\", palette = 2) +\r\n  theme_classic() +\r\n  scale_y_continuous(labels = scales::comma_format()) +\r\n  labs(title = \"Nurse Numbers in Selected States\", \r\n       subtitle = \"With ggborderline\\n\",\r\n       colour = \"State\",\r\n       x = \"\",\r\n       y = \"Count of Nurses\\n\",\r\n       caption = \"\\nNick Zani | @nickzani\") +\r\n  theme(strip.text = element_text(size = 18),\r\n        axis.title = element_text(size = 14),\r\n        axis.text.x = element_text(size = 14),\r\n        axis.text.y = element_text(size = 18),\r\n        plot.title = element_text(size = 18),\r\n        plot.subtitle = element_text(size = 14),\r\n        plot.caption = element_text(size = 12),\r\n        legend.text = element_text(size = 16),\r\n        legend.title = element_text(size = 18)\r\n  )\r\n\r\n\r\n\r\n\r\nImproving the Labels\r\nThe final tweak is to fix the labels. The legend is not in order, and makes the graph harder to read. By adding a secondary axis in, we can simplify this. The trick is to create a second dataframe which contains just the labels at the maximum values.\r\n\r\n\r\nlibrary(ggborderline)\r\n\r\nmax_y_value <- nurses_filtered %>%\r\n  filter(year == max(year))\r\n\r\nnurses_filtered %>%\r\n  ggplot(aes(x = year, \r\n             y = total_employed_rn, \r\n             group = state, \r\n             colour = state)) +\r\n  geom_borderline(size = 2, bordersize = 0.75) +\r\n  scale_colour_brewer(type = \"qual\", palette = 2) +\r\n  theme_classic() +\r\n  scale_y_continuous(labels = scales::comma_format(),\r\n                     sec.axis = dup_axis(breaks = max_y_value$total_employed_rn,\r\n                                         labels = max_y_value$state,\r\n                                         name = \"\")) +\r\n  labs(title = \"Nurse Numbers in Selected States\", \r\n       subtitle = \"With ggborderline + secondary axis labelling\\n\",\r\n       colour = \"State\",\r\n       x = \"\",\r\n       y = \"Count of Nurses\\n\",\r\n       caption = \"\\nNick Zani | @nickzani\") +\r\n  theme(strip.text = element_text(size = 18),\r\n        axis.title = element_text(size = 14),\r\n        axis.text.x = element_text(size = 14),\r\n        axis.text.y = element_text(size = 18),\r\n        plot.title = element_text(size = 18),\r\n        plot.subtitle = element_text(size = 14),\r\n        plot.caption = element_text(size = 12),\r\n        legend.text = element_text(size = 16),\r\n        legend.title = element_text(size = 18),\r\n        legend.position = \"none\",\r\n        axis.line.y.right = element_line(color = \"white\"),\r\n        axis.ticks.y.right = element_line(color = \"white\")\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-01-17-labelling-line-graphs/labelling-line-graphs_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2022-01-18T09:50:14+00:00",
    "input_file": "labelling-line-graphs.knit.md"
  },
  {
    "path": "posts/2022-01-12-tidy-tuesday-week-2-2022/",
    "title": "Tidy Tuesday: Week 2 2022",
    "description": "Testing Out the geomtextpath Package.",
    "author": [
      {
        "name": "Nick Zani",
        "url": {}
      }
    ],
    "date": "2022-01-12",
    "categories": [],
    "contents": "\r\nIntroduction\r\nI’ve wanted to try out the geomtextpath package for a while so thought I would use this week’s Tidy Tuesday data on bees to give it a go.\r\n\r\nData\r\nNot a huge amount of work required to tidy this up, just a few tweaks to dates and percentages\r\n\r\n\r\nlibrary(tibble)\r\nlibrary(dplyr)\r\nlibrary(stringr)\r\nlibrary(readr)\r\nlibrary(tidyr)\r\nlibrary(janitor)\r\nlibrary(ggplot2)\r\n\r\ncolony <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/colony.csv')\r\nstressor <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/stressor.csv')\r\n\r\nstressor_clean <- stressor %>% \r\n  mutate(stress_pct = stress_pct/100) %>%\r\n  mutate(month_num = case_when(months == \"January-March\" ~ 1,\r\n                               months == \"April-June\" ~ 4,\r\n                               months == \"July-September\" ~ 7,\r\n                               months == \"October-December\" ~ 10,)) %>%\r\n  mutate(year_mon = as.Date(paste0(year, \"-\", str_pad(month_num, 2, side = \"left\", pad = 0), \"-01\")),\r\n         formatted_dt = format(year_mon, \"%b-%y\"))\r\n\r\n\r\n\r\nVisualisation\r\nDownload the package from Github:\r\n\r\n\r\nlibrary(remotes)\r\nremotes::install_github(\"AllanCameron/geomtextpath\")\r\n\r\n\r\n\r\nPlot the graph:\r\n\r\n\r\nlibrary(geomtextpath)\r\n\r\nstressor_clean %>%\r\n  filter(state == \"Texas\") %>%\r\n  filter(stressor != \"Unknown\") %>%\r\n  filter(stressor != \"Other\") %>%\r\n  ggplot(aes(x = year_mon, y = stress_pct, colour = stressor)) +\r\n    geom_point(alpha = 0.3,\r\n               size = 2) +\r\n    geom_textsmooth(aes(label = stressor, colour = stressor),\r\n                    method = \"loess\", \r\n                    formula = y ~ x,\r\n                    size = 5, \r\n                    linetype = 3, \r\n                    fontface = 2, \r\n                    linewidth = 1.5)+\r\n  scale_colour_brewer(type = \"qual\", palette = 2) +\r\n  theme_classic() +\r\n  scale_y_continuous(labels = scales::percent_format(accuracy=1)) +\r\n  labs(title = \"Stressor Impact on Texas Bee Colonies\", \r\n       subtitle = \"Unknown and Other Stressors Removed\\n\",\r\n       x = \"\",\r\n       y = \"Percent of Colonies Affected\\n\",\r\n       caption = \"\\nNick Zani | @nickzani\") +\r\n  theme(strip.text = element_text(size = 18),\r\n        axis.title = element_text(size = 14),\r\n        axis.text.x = element_text(size = 14),\r\n        axis.text.y = element_text(size = 18),\r\n        plot.title = element_text(size = 18),\r\n        plot.subtitle = element_text(size = 14),\r\n        plot.caption = element_text(size = 12),\r\n        legend.text = element_text(size = 16),\r\n        legend.title = element_text(size = 18),\r\n        legend.position = \"none\"\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-01-12-tidy-tuesday-week-2-2022/tidy-tuesday-week-2-2022_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-01-12T11:15:19+00:00",
    "input_file": "tidy-tuesday-week-2-2022.knit.md"
  },
  {
    "path": "posts/2022-01-07-tidy-tuesday-week-1-2022/",
    "title": "Tidy Tuesday: Week 1 2022",
    "description": "Bring your own data: When are the twins waking up?",
    "author": [
      {
        "name": "Nick Zani",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2022-01-07",
    "categories": [],
    "contents": "\r\nIntroduction\r\nThe theme for Tidy Tuesday week 1 was bring your own data. For a while I have had a feeling that our just-turned-two year old twins have been waking up earlier and earlier, so I decided to use my Apple watch step data to try to prove this.\r\n\r\nData\r\nThe Apple health data can be exported via the health app as an xml file. By filtering on the step count and Apple watch flag we can extract the date and time using str_match. We will assume that if there were steps in the hours between midnight and 5am it was because of (at least one of) the twins waking up.\r\n\r\n\r\nlibrary(dplyr)\r\nlibrary(readr)\r\nlibrary(tibble)\r\nlibrary(stringr)\r\nlibrary(ggplot2)\r\nlibrary(scales)\r\n\r\nsteps <- as_tibble(read_lines(file = \"../../_data/apple_health_extract.xml\")) %>%\r\n  filter(str_detect(value, 'StepCount')) %>%\r\n  filter(str_detect(value, 'Apple Watch')) %>%\r\n  mutate(creation_dt = as.Date(str_match(value, 'creationDate=\\\\\"\\\\\"(\\\\d+-\\\\d+-\\\\d+) \\\\d+:\\\\d+:\\\\d+')[,2]),\r\n         creation_hr = as.numeric(str_match(value, 'creationDate=\\\\\"\\\\\"\\\\d+-\\\\d+-\\\\d+ (\\\\d+):\\\\d+:\\\\d+')[,2])\r\n         )\r\n\r\n\r\n\r\nNow we will filter for the last few months, extract the day of the week and group the wakeup times. Finally we will merge on the counts by month so we can get a percentage, to take account of the fact that different months are different length, and on some occasions my watch was charging.\r\n\r\n\r\naggregated_steps <- steps %>%\r\n  filter(creation_dt >= as.Date(\"2021-04-01\") & creation_dt <= as.Date(\"2021-12-31\")) %>%\r\n  select(-value) %>%\r\n  distinct() %>%\r\n  mutate(weekday_name = strftime(creation_dt,'%a'),\r\n         weekday_num = as.numeric(strftime(creation_dt,'%u')),\r\n         month_name = strftime(creation_dt,'%b'),\r\n         month_num = as.numeric(strftime(creation_dt,'%m'))\r\n         ) %>%\r\n  mutate(grouping = case_when(creation_hr %in% c(0,1) ~ \"0 - 1am\",\r\n                              creation_hr %in% c(2,3) ~ \"2 - 3am\",\r\n                              creation_hr %in% c(4,5) ~ \"4 - 5am\"\r\n                              )\r\n         ) %>%\r\n  filter(!is.na(grouping)) %>%\r\n  group_by(month_name, month_num, grouping) %>%\r\n  summarise(cnt = n()) %>%\r\n  ungroup()\r\n\r\nmonthly_cnts <- aggregated_steps %>%\r\n  group_by(month_name, month_num) %>%\r\n  summarise(mthly_total = sum(cnt))\r\n\r\npercentages <- aggregated_steps %>%\r\n  inner_join(monthly_cnts) %>%\r\n  mutate(percent_wakeups = cnt/mthly_total)\r\n\r\n\r\n\r\nVisualisation\r\nNow we have the data in tidy form we can pass to ggplot to visualise. This confirms my theory that the twins have been waking up earlier and earlier, with a big change in November, where over half the wakeups were before 4am!\r\n\r\n\r\npercentages %>%\r\n  ggplot(aes(x = reorder(month_name, month_num),\r\n             y = percent_wakeups,\r\n             fill = grouping)\r\n         ) +\r\n  geom_col() +\r\n  theme_void() +\r\n  scale_y_continuous(labels = scales::percent) +\r\n  labs(title = \"When Are the Twins Waking Up?\", \r\n       subtitle = \"Percentage of Wakeups by Time, by Month\\n\",\r\n       x = \"\",\r\n       y = \"\",\r\n       fill = \"Wakeup Time\",\r\n       caption = \"\\nNick Zani | @nickzani\") +\r\n  scale_fill_brewer(palette = 3) +\r\n  theme(strip.text = element_text(size = 18),\r\n        axis.title = element_text(size = 14),\r\n        axis.text.x = element_text(size = 14),\r\n        axis.text.y = element_text(size = 18),\r\n        plot.title = element_text(size = 18),\r\n        plot.subtitle = element_text(size = 14),\r\n        plot.caption = element_text(size = 12),\r\n        legend.text = element_text(size = 16),\r\n        legend.title = element_text(size = 18)\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-01-07-tidy-tuesday-week-1-2022/tidy-tuesday-week-1-2022_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-01-12T10:29:44+00:00",
    "input_file": "tidy-tuesday-week-1-2022.knit.md"
  }
]
